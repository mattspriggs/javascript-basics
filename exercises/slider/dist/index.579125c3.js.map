{"mappings":"AAAA,SAAS,OAAO,MAAM,EAAE;IACtB,IAAI,CAAE,CAAA,kBAAkB,OAAM,GAC5B,MAAM,IAAI,MAAM,uBAAuB;IAEzC,6CAA6C;IAC7C,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,uCAAuC;IACvC,MAAM,SAAS,OAAO,aAAa,CAAC;IACpC,MAAM,aAAa,OAAO,aAAa,CAAC;IACxC,MAAM,aAAa,OAAO,aAAa,CAAC;IAExC,SAAS,cAAc;QACrB,0EAA0E;QAC1E,UAAU,OAAO,aAAa,CAAC,eAAe,OAAO,iBAAiB;QACtE,OAAO,QAAQ,sBAAsB,IAAI,OAAO,gBAAgB;QAChE,OAAO,QAAQ,kBAAkB,IAAI,OAAO,iBAAiB;IAC/D;IACA,SAAS,eAAe;QACtB,QAAQ,SAAS,CAAC,GAAG,CAAC;QACtB,KAAK,SAAS,CAAC,GAAG,CAAC;QACnB,KAAK,SAAS,CAAC,GAAG,CAAC;IACrB;IAEA,SAAS,KAAK,SAAS,EAAE;QACvB,6CAA6C;QAC7C,MAAM,kBAAkB;YAAC;YAAQ;YAAW;SAAO;QACnD,KAAK,SAAS,CAAC,MAAM,IAAI;QACzB,QAAQ,SAAS,CAAC,MAAM,IAAI;QAC5B,KAAK,SAAS,CAAC,MAAM,IAAI;QACzB,IAAI,cAAc,QAChB,4GAA4G;QAC5G,CAAC,MAAM,SAAS,KAAK,GAAG;YACtB,mFAAmF;YACnF,KAAK,sBAAsB,IAAI,OAAO,gBAAgB;YACtD;YACA;SACD;aAED,CAAC,MAAM,SAAS,KAAK,GAAG;YACtB,oFAAoF;YACpF;YACA;YACA,KAAK,kBAAkB,IAAI,OAAO,iBAAiB;SACpD;QAEH;IACF;IAEA,4DAA4D;IAC5D;IACA;IAEA,iBAAiB;IACjB,WAAW,gBAAgB,CAAC,SAAS,IAAM,KAAK;IAChD,WAAW,gBAAgB,CAAC,SAAS;AACvC;AAEA,MAAM,WAAW,OAAO,SAAS,aAAa,CAAC;AAC/C,MAAM,YAAY,OAAO,SAAS,aAAa,CAAC","sources":["src/index.js"],"sourcesContent":["function Slider(slider) {\n  if (!(slider instanceof Element)) {\n    throw new Error('No slider passed in');\n  }\n  //Create variable for working with the slider\n  let current;\n  let prev;\n  let next;\n  //select elements needed for the slider\n  const slides = slider.querySelector('.slides');\n  const prevButton = slider.querySelector('.goToPrev');\n  const nextButton = slider.querySelector('.goToNext');\n\n  function startSlider() {\n    //Always use element sibling and element child when looking for an element\n    current = slider.querySelector('.current') || slides.firstElementChild;\n    prev = current.previousElementSibling || slides.lastElementChild;\n    next = current.nextElementSibling || slides.firstElementChild;\n  }\n  function applyClasses() {\n    current.classList.add('current');\n    prev.classList.add('prev');\n    next.classList.add('next');\n  }\n\n  function move(direction) {\n    //strip all classes off of the current slides\n    const classesToRemove = ['prev', 'current', 'next'];\n    prev.classList.remove(...classesToRemove);\n    current.classList.remove(...classesToRemove);\n    next.classList.remove(...classesToRemove);\n    if (direction === 'back') {\n      //make a new array of the new values and destructure then over and into the prev, current and next variables\n      [prev, current, next] = [\n        //get the prev slide - if there is none, get the last slide from the slider to wrap\n        prev.previousElementSibling || slides.lastElementChild,\n        prev,\n        current,\n      ];\n    } else {\n      [prev, current, next] = [\n        //get the next slide - if there is none, get the first slide from the slider to wrap\n        current,\n        next,\n        next.nextElementSibling || slides.firstElementChild,\n      ];\n    }\n    applyClasses();\n  }\n\n  //When this slider is created, run the start slider function\n  startSlider();\n  applyClasses();\n\n  //Event listeners\n  prevButton.addEventListener('click', () => move('back'));\n  nextButton.addEventListener('click', move);\n}\n\nconst mySlider = Slider(document.querySelector('.slider'));\nconst dogSlider = Slider(document.querySelector('.dog-slider'));\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}